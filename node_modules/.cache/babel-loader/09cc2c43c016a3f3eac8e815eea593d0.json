{"ast":null,"code":"/**\r\n * DevExtreme (exporter/exceljs/export_data_grid.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.exportDataGrid = exportDataGrid;\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _export = require(\"./export\");\n\nvar _errors = _interopRequireDefault(require(\"../../core/errors\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar privateOptions = {\n  _trySetAutoFilter: function (dataProvider, worksheet, cellRange, headerRowCount, autoFilterEnabled) {\n    if (autoFilterEnabled) {\n      if (!(0, _type.isDefined)(worksheet.autoFilter) && dataProvider.getRowsCount() > 0) {\n        var dataRange = {\n          from: {\n            row: cellRange.from.row + headerRowCount - 1,\n            column: cellRange.from.column\n          },\n          to: cellRange.to\n        };\n        worksheet.autoFilter = dataRange;\n      }\n    }\n  },\n  _trySetFont: function (excelCell, bold) {\n    if ((0, _type.isDefined)(bold)) {\n      excelCell.font = excelCell.font || {};\n      excelCell.font.bold = bold;\n    }\n  },\n  _getWorksheetFrozenState: function (dataProvider, cellRange) {\n    return {\n      state: \"frozen\",\n      ySplit: cellRange.from.row + dataProvider.getFrozenArea().y - 1\n    };\n  },\n  _trySetOutlineLevel: function (dataProvider, row, rowIndex, headerRowCount) {\n    if (rowIndex >= headerRowCount) {\n      row.outlineLevel = dataProvider.getGroupLevel(rowIndex);\n    }\n  },\n  _getCustomizeCellOptions: function (excelCell, gridCell) {\n    var options = {\n      excelCell: excelCell,\n      gridCell: gridCell\n    };\n    Object.defineProperty(options, \"cell\", {\n      get: function () {\n        _errors.default.log(\"W0003\", \"CustomizeCell handler argument\", \"cell\", \"20.1\", \"Use the 'excelCell' field instead\");\n\n        return excelCell;\n      }\n    });\n    return options;\n  },\n  _needMergeRange: function (rowIndex, headerRowCount) {\n    return rowIndex < headerRowCount;\n  },\n  _renderLoadPanel: function (component) {\n    var rowsView = component.getView(\"rowsView\");\n\n    rowsView._renderLoadPanel(rowsView.element(), rowsView.element().parent());\n  }\n};\n\nfunction exportDataGrid(options) {\n  return _export.Export.export(_getFullOptions(options), privateOptions);\n}\n\nfunction _getFullOptions(options) {\n  if (!((0, _type.isDefined)(options) && (0, _type.isObject)(options))) {\n    throw Error('The \"exportDataGrid\" method requires a configuration object.');\n  }\n\n  if (!((0, _type.isDefined)(options.component) && (0, _type.isObject)(options.component) && \"dxDataGrid\" === options.component.NAME)) {\n    throw Error('The \"component\" field must contain a DataGrid instance.');\n  }\n\n  if (!(0, _type.isDefined)(options.selectedRowsOnly)) {\n    options.selectedRowsOnly = false;\n  }\n\n  if (!(0, _type.isDefined)(options.autoFilterEnabled)) {\n    options.autoFilterEnabled = false;\n  }\n\n  return _export.Export.getFullOptions(options);\n}","map":{"version":3,"sources":["C:/Pessoal/poc-pivot/node_modules/devextreme/exporter/exceljs/export_data_grid.js"],"names":["exports","exportDataGrid","_type","require","_export","_errors","_interopRequireDefault","obj","__esModule","privateOptions","_trySetAutoFilter","dataProvider","worksheet","cellRange","headerRowCount","autoFilterEnabled","isDefined","autoFilter","getRowsCount","dataRange","from","row","column","to","_trySetFont","excelCell","bold","font","_getWorksheetFrozenState","state","ySplit","getFrozenArea","y","_trySetOutlineLevel","rowIndex","outlineLevel","getGroupLevel","_getCustomizeCellOptions","gridCell","options","Object","defineProperty","get","default","log","_needMergeRange","_renderLoadPanel","component","rowsView","getView","element","parent","Export","export","_getFullOptions","isObject","Error","NAME","selectedRowsOnly","getFullOptions"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,cAAR,GAAyBA,cAAzB;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIE,OAAO,GAAGC,sBAAsB,CAACH,OAAO,CAAC,mBAAD,CAAR,CAApC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,cAAc,GAAG;AACjBC,EAAAA,iBAAiB,EAAE,UAASC,YAAT,EAAuBC,SAAvB,EAAkCC,SAAlC,EAA6CC,cAA7C,EAA6DC,iBAA7D,EAAgF;AAC/F,QAAIA,iBAAJ,EAAuB;AACnB,UAAI,CAAC,CAAC,GAAGb,KAAK,CAACc,SAAV,EAAqBJ,SAAS,CAACK,UAA/B,CAAD,IAA+CN,YAAY,CAACO,YAAb,KAA8B,CAAjF,EAAoF;AAChF,YAAIC,SAAS,GAAG;AACZC,UAAAA,IAAI,EAAE;AACFC,YAAAA,GAAG,EAAER,SAAS,CAACO,IAAV,CAAeC,GAAf,GAAqBP,cAArB,GAAsC,CADzC;AAEFQ,YAAAA,MAAM,EAAET,SAAS,CAACO,IAAV,CAAeE;AAFrB,WADM;AAKZC,UAAAA,EAAE,EAAEV,SAAS,CAACU;AALF,SAAhB;AAOAX,QAAAA,SAAS,CAACK,UAAV,GAAuBE,SAAvB;AACH;AACJ;AACJ,GAdgB;AAejBK,EAAAA,WAAW,EAAE,UAASC,SAAT,EAAoBC,IAApB,EAA0B;AACnC,QAAI,CAAC,GAAGxB,KAAK,CAACc,SAAV,EAAqBU,IAArB,CAAJ,EAAgC;AAC5BD,MAAAA,SAAS,CAACE,IAAV,GAAiBF,SAAS,CAACE,IAAV,IAAkB,EAAnC;AACAF,MAAAA,SAAS,CAACE,IAAV,CAAeD,IAAf,GAAsBA,IAAtB;AACH;AACJ,GApBgB;AAqBjBE,EAAAA,wBAAwB,EAAE,UAASjB,YAAT,EAAuBE,SAAvB,EAAkC;AACxD,WAAO;AACHgB,MAAAA,KAAK,EAAE,QADJ;AAEHC,MAAAA,MAAM,EAAEjB,SAAS,CAACO,IAAV,CAAeC,GAAf,GAAqBV,YAAY,CAACoB,aAAb,GAA6BC,CAAlD,GAAsD;AAF3D,KAAP;AAIH,GA1BgB;AA2BjBC,EAAAA,mBAAmB,EAAE,UAAStB,YAAT,EAAuBU,GAAvB,EAA4Ba,QAA5B,EAAsCpB,cAAtC,EAAsD;AACvE,QAAIoB,QAAQ,IAAIpB,cAAhB,EAAgC;AAC5BO,MAAAA,GAAG,CAACc,YAAJ,GAAmBxB,YAAY,CAACyB,aAAb,CAA2BF,QAA3B,CAAnB;AACH;AACJ,GA/BgB;AAgCjBG,EAAAA,wBAAwB,EAAE,UAASZ,SAAT,EAAoBa,QAApB,EAA8B;AACpD,QAAIC,OAAO,GAAG;AACVd,MAAAA,SAAS,EAAEA,SADD;AAEVa,MAAAA,QAAQ,EAAEA;AAFA,KAAd;AAIAE,IAAAA,MAAM,CAACC,cAAP,CAAsBF,OAAtB,EAA+B,MAA/B,EAAuC;AACnCG,MAAAA,GAAG,EAAE,YAAW;AACZrC,QAAAA,OAAO,CAACsC,OAAR,CAAgBC,GAAhB,CAAoB,OAApB,EAA6B,gCAA7B,EAA+D,MAA/D,EAAuE,MAAvE,EAA+E,mCAA/E;;AACA,eAAOnB,SAAP;AACH;AAJkC,KAAvC;AAMA,WAAOc,OAAP;AACH,GA5CgB;AA6CjBM,EAAAA,eAAe,EAAE,UAASX,QAAT,EAAmBpB,cAAnB,EAAmC;AAChD,WAAOoB,QAAQ,GAAGpB,cAAlB;AACH,GA/CgB;AAgDjBgC,EAAAA,gBAAgB,EAAE,UAASC,SAAT,EAAoB;AAClC,QAAIC,QAAQ,GAAGD,SAAS,CAACE,OAAV,CAAkB,UAAlB,CAAf;;AACAD,IAAAA,QAAQ,CAACF,gBAAT,CAA0BE,QAAQ,CAACE,OAAT,EAA1B,EAA8CF,QAAQ,CAACE,OAAT,GAAmBC,MAAnB,EAA9C;AACH;AAnDgB,CAArB;;AAsDA,SAASlD,cAAT,CAAwBsC,OAAxB,EAAiC;AAC7B,SAAOnC,OAAO,CAACgD,MAAR,CAAeC,MAAf,CAAsBC,eAAe,CAACf,OAAD,CAArC,EAAgD9B,cAAhD,CAAP;AACH;;AAED,SAAS6C,eAAT,CAAyBf,OAAzB,EAAkC;AAC9B,MAAI,EAAE,CAAC,GAAGrC,KAAK,CAACc,SAAV,EAAqBuB,OAArB,KAAiC,CAAC,GAAGrC,KAAK,CAACqD,QAAV,EAAoBhB,OAApB,CAAnC,CAAJ,EAAsE;AAClE,UAAMiB,KAAK,CAAC,8DAAD,CAAX;AACH;;AACD,MAAI,EAAE,CAAC,GAAGtD,KAAK,CAACc,SAAV,EAAqBuB,OAAO,CAACQ,SAA7B,KAA2C,CAAC,GAAG7C,KAAK,CAACqD,QAAV,EAAoBhB,OAAO,CAACQ,SAA5B,CAA3C,IAAqF,iBAAiBR,OAAO,CAACQ,SAAR,CAAkBU,IAA1H,CAAJ,EAAqI;AACjI,UAAMD,KAAK,CAAC,yDAAD,CAAX;AACH;;AACD,MAAI,CAAC,CAAC,GAAGtD,KAAK,CAACc,SAAV,EAAqBuB,OAAO,CAACmB,gBAA7B,CAAL,EAAqD;AACjDnB,IAAAA,OAAO,CAACmB,gBAAR,GAA2B,KAA3B;AACH;;AACD,MAAI,CAAC,CAAC,GAAGxD,KAAK,CAACc,SAAV,EAAqBuB,OAAO,CAACxB,iBAA7B,CAAL,EAAsD;AAClDwB,IAAAA,OAAO,CAACxB,iBAAR,GAA4B,KAA5B;AACH;;AACD,SAAOX,OAAO,CAACgD,MAAR,CAAeO,cAAf,CAA8BpB,OAA9B,CAAP;AACH","sourcesContent":["/**\r\n * DevExtreme (exporter/exceljs/export_data_grid.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.exportDataGrid = exportDataGrid;\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _export = require(\"./export\");\r\nvar _errors = _interopRequireDefault(require(\"../../core/errors\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar privateOptions = {\r\n    _trySetAutoFilter: function(dataProvider, worksheet, cellRange, headerRowCount, autoFilterEnabled) {\r\n        if (autoFilterEnabled) {\r\n            if (!(0, _type.isDefined)(worksheet.autoFilter) && dataProvider.getRowsCount() > 0) {\r\n                var dataRange = {\r\n                    from: {\r\n                        row: cellRange.from.row + headerRowCount - 1,\r\n                        column: cellRange.from.column\r\n                    },\r\n                    to: cellRange.to\r\n                };\r\n                worksheet.autoFilter = dataRange\r\n            }\r\n        }\r\n    },\r\n    _trySetFont: function(excelCell, bold) {\r\n        if ((0, _type.isDefined)(bold)) {\r\n            excelCell.font = excelCell.font || {};\r\n            excelCell.font.bold = bold\r\n        }\r\n    },\r\n    _getWorksheetFrozenState: function(dataProvider, cellRange) {\r\n        return {\r\n            state: \"frozen\",\r\n            ySplit: cellRange.from.row + dataProvider.getFrozenArea().y - 1\r\n        }\r\n    },\r\n    _trySetOutlineLevel: function(dataProvider, row, rowIndex, headerRowCount) {\r\n        if (rowIndex >= headerRowCount) {\r\n            row.outlineLevel = dataProvider.getGroupLevel(rowIndex)\r\n        }\r\n    },\r\n    _getCustomizeCellOptions: function(excelCell, gridCell) {\r\n        var options = {\r\n            excelCell: excelCell,\r\n            gridCell: gridCell\r\n        };\r\n        Object.defineProperty(options, \"cell\", {\r\n            get: function() {\r\n                _errors.default.log(\"W0003\", \"CustomizeCell handler argument\", \"cell\", \"20.1\", \"Use the 'excelCell' field instead\");\r\n                return excelCell\r\n            }\r\n        });\r\n        return options\r\n    },\r\n    _needMergeRange: function(rowIndex, headerRowCount) {\r\n        return rowIndex < headerRowCount\r\n    },\r\n    _renderLoadPanel: function(component) {\r\n        var rowsView = component.getView(\"rowsView\");\r\n        rowsView._renderLoadPanel(rowsView.element(), rowsView.element().parent())\r\n    }\r\n};\r\n\r\nfunction exportDataGrid(options) {\r\n    return _export.Export.export(_getFullOptions(options), privateOptions)\r\n}\r\n\r\nfunction _getFullOptions(options) {\r\n    if (!((0, _type.isDefined)(options) && (0, _type.isObject)(options))) {\r\n        throw Error('The \"exportDataGrid\" method requires a configuration object.')\r\n    }\r\n    if (!((0, _type.isDefined)(options.component) && (0, _type.isObject)(options.component) && \"dxDataGrid\" === options.component.NAME)) {\r\n        throw Error('The \"component\" field must contain a DataGrid instance.')\r\n    }\r\n    if (!(0, _type.isDefined)(options.selectedRowsOnly)) {\r\n        options.selectedRowsOnly = false\r\n    }\r\n    if (!(0, _type.isDefined)(options.autoFilterEnabled)) {\r\n        options.autoFilterEnabled = false\r\n    }\r\n    return _export.Export.getFullOptions(options)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}