{"ast":null,"code":"/**\r\n * DevExtreme (exporter/exceljs/export.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.Export = void 0;\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _export_format = require(\"./export_format\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _window = require(\"../../core/utils/window\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\nvar MAX_EXCEL_COLUMN_WIDTH = 255;\nvar Export = {\n  getFullOptions: function (options) {\n    var fullOptions = (0, _extend.extend)({}, options);\n\n    if (!((0, _type.isDefined)(fullOptions.worksheet) && (0, _type.isObject)(fullOptions.worksheet))) {\n      throw Error('The \"worksheet\" field must contain an object.');\n    }\n\n    if (!(0, _type.isDefined)(fullOptions.topLeftCell)) {\n      fullOptions.topLeftCell = {\n        row: 1,\n        column: 1\n      };\n    } else {\n      if ((0, _type.isString)(fullOptions.topLeftCell)) {\n        var _fullOptions$workshee = fullOptions.worksheet.getCell(fullOptions.topLeftCell),\n            row = _fullOptions$workshee.row,\n            col = _fullOptions$workshee.col;\n\n        fullOptions.topLeftCell = {\n          row: row,\n          column: col\n        };\n      }\n    }\n\n    if (!(0, _type.isDefined)(fullOptions.keepColumnWidths)) {\n      fullOptions.keepColumnWidths = true;\n    }\n\n    if (!(0, _type.isDefined)(fullOptions.loadPanel)) {\n      fullOptions.loadPanel = {};\n    }\n\n    if (!(0, _type.isDefined)(fullOptions.loadPanel.enabled)) {\n      fullOptions.loadPanel.enabled = true;\n    }\n\n    if (!(0, _type.isDefined)(fullOptions.loadPanel.text)) {\n      fullOptions.loadPanel.text = _message.default.format(\"dxDataGrid-exporting\");\n    }\n\n    return fullOptions;\n  },\n  convertDateForExcelJS: function (date) {\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  },\n  setNumberFormat: function (excelCell, numberFormat) {\n    excelCell.numFmt = numberFormat;\n  },\n  tryConvertToExcelNumberFormat: function (format, dataType) {\n    var newFormat = _export_format.ExportFormat.formatObjectConverter(format, dataType);\n\n    var currency = newFormat.currency;\n    format = newFormat.format;\n    dataType = newFormat.dataType;\n    return _export_format.ExportFormat.convertFormat(format, newFormat.precision, dataType, currency);\n  },\n  setAlignment: function (excelCell, wrapText, horizontalAlignment) {\n    excelCell.alignment = excelCell.alignment || {};\n\n    if ((0, _type.isDefined)(wrapText)) {\n      excelCell.alignment.wrapText = wrapText;\n    }\n\n    if ((0, _type.isDefined)(horizontalAlignment)) {\n      excelCell.alignment.horizontal = horizontalAlignment;\n    }\n\n    excelCell.alignment.vertical = \"top\";\n  },\n  setColumnsWidth: function (worksheet, widths, startColumnIndex) {\n    if (!(0, _type.isDefined)(widths)) {\n      return;\n    }\n\n    for (var i = 0; i < widths.length; i++) {\n      var columnWidth = widths[i];\n\n      if (\"number\" === typeof columnWidth && isFinite(columnWidth)) {\n        worksheet.getColumn(startColumnIndex + i).width = Math.min(MAX_EXCEL_COLUMN_WIDTH, Math.floor(columnWidth / MAX_DIGIT_WIDTH_IN_PIXELS * 100) / 100);\n      }\n    }\n  },\n  tryGetMergeRange: function (rowIndex, cellIndex, mergedCells, dataProvider) {\n    if (!mergedCells[rowIndex] || !mergedCells[rowIndex][cellIndex]) {\n      var cellMerge = dataProvider.getCellMerging(rowIndex, cellIndex);\n\n      if (cellMerge.colspan || cellMerge.rowspan) {\n        for (var i = rowIndex; i <= rowIndex + cellMerge.rowspan || 0; i++) {\n          for (var j = cellIndex; j <= cellIndex + cellMerge.colspan || 0; j++) {\n            if (!mergedCells[i]) {\n              mergedCells[i] = [];\n            }\n\n            mergedCells[i][j] = true;\n          }\n        }\n\n        return {\n          start: {\n            row: rowIndex,\n            column: cellIndex\n          },\n          end: {\n            row: rowIndex + (cellMerge.rowspan || 0),\n            column: cellIndex + (cellMerge.colspan || 0)\n          }\n        };\n      }\n    }\n  },\n  mergeCells: function (worksheet, topLeftCell, mergeRanges) {\n    mergeRanges.forEach(function (mergeRange) {\n      worksheet.mergeCells(mergeRange.start.row + topLeftCell.row, mergeRange.start.column + topLeftCell.column, mergeRange.end.row + topLeftCell.row, mergeRange.end.column + topLeftCell.column);\n    });\n  },\n  setLoadPanelOptions: function (component, options, privateOptions) {\n    if (!(0, _window.hasWindow)()) {\n      return;\n    }\n\n    component._setOptionWithoutOptionChange(\"loadPanel\", options);\n\n    privateOptions._renderLoadPanel(component);\n  },\n  \"export\": function (options, privateOptions) {\n    var _this = this;\n\n    var customizeCell = options.customizeCell,\n        component = options.component,\n        worksheet = options.worksheet,\n        topLeftCell = options.topLeftCell,\n        autoFilterEnabled = options.autoFilterEnabled,\n        keepColumnWidths = options.keepColumnWidths,\n        selectedRowsOnly = options.selectedRowsOnly,\n        loadPanel = options.loadPanel;\n    var initialLoadPanelOptions = (0, _extend.extend)({}, component.option(\"loadPanel\"));\n\n    if (\"animation\" in component.option(\"loadPanel\")) {\n      loadPanel.animation = null;\n    }\n\n    this.setLoadPanelOptions(component, loadPanel, privateOptions);\n    var wrapText = !!component.option(\"wordWrapEnabled\");\n    worksheet.properties.outlineProperties = {\n      summaryBelow: false,\n      summaryRight: false\n    };\n    var cellRange = {\n      from: {\n        row: topLeftCell.row,\n        column: topLeftCell.column\n      },\n      to: {\n        row: topLeftCell.row,\n        column: topLeftCell.column\n      }\n    };\n    var dataProvider = component.getDataProvider(selectedRowsOnly);\n    return new Promise(function (resolve) {\n      dataProvider.ready().done(function () {\n        var columns = dataProvider.getColumns();\n        var headerRowCount = (0, _type.isFunction)(dataProvider.getHeaderRowCount) ? dataProvider.getHeaderRowCount() : 1;\n        var dataRowsCount = dataProvider.getRowsCount();\n\n        if (keepColumnWidths) {\n          _this.setColumnsWidth(worksheet, dataProvider.getColumnsWidths(), cellRange.from.column);\n        }\n\n        var mergedCells = [];\n        var mergeRanges = [];\n\n        for (var rowIndex = 0; rowIndex < dataRowsCount; rowIndex++) {\n          var row = worksheet.getRow(cellRange.from.row + rowIndex);\n\n          _this.exportRow(rowIndex, columns.length, row, cellRange.from.column, dataProvider, customizeCell, headerRowCount, mergedCells, mergeRanges, wrapText, privateOptions);\n\n          if (rowIndex >= 1) {\n            cellRange.to.row++;\n          }\n        }\n\n        _this.mergeCells(worksheet, topLeftCell, mergeRanges);\n\n        cellRange.to.column += columns.length > 0 ? columns.length - 1 : 0;\n        var worksheetViewSettings = worksheet.views[0] || {};\n\n        if (component.option(\"rtlEnabled\")) {\n          worksheetViewSettings.rightToLeft = true;\n        }\n\n        if (headerRowCount > 0) {\n          if (Object.keys(worksheetViewSettings).indexOf(\"state\") === -1) {\n            (0, _extend.extend)(worksheetViewSettings, privateOptions._getWorksheetFrozenState(dataProvider, cellRange));\n          }\n\n          privateOptions._trySetAutoFilter(dataProvider, worksheet, cellRange, headerRowCount, autoFilterEnabled);\n        }\n\n        if (Object.keys(worksheetViewSettings).length > 0) {\n          worksheet.views = [worksheetViewSettings];\n        }\n\n        resolve(cellRange);\n      }).always(function () {\n        _this.setLoadPanelOptions(component, initialLoadPanelOptions, privateOptions);\n      });\n    });\n  },\n  exportRow: function (rowIndex, cellCount, row, startColumnIndex, dataProvider, customizeCell, headerRowCount, mergedCells, mergeRanges, wrapText, privateOptions) {\n    var styles = dataProvider.getStyles();\n\n    privateOptions._trySetOutlineLevel(dataProvider, row, rowIndex, headerRowCount);\n\n    for (var cellIndex = 0; cellIndex < cellCount; cellIndex++) {\n      var cellData = dataProvider.getCellData(rowIndex, cellIndex, true);\n      var cell = cellData.cellSourceData;\n      var excelCell = row.getCell(startColumnIndex + cellIndex);\n\n      if ((0, _type.isDate)(cellData.value)) {\n        excelCell.value = this.convertDateForExcelJS(cellData.value);\n      } else {\n        excelCell.value = cellData.value;\n      }\n\n      if ((0, _type.isDefined)(excelCell.value)) {\n        var _styles$dataProvider$ = styles[dataProvider.getStyleId(rowIndex, cellIndex)],\n            bold = _styles$dataProvider$.bold,\n            horizontalAlignment = _styles$dataProvider$.alignment,\n            format = _styles$dataProvider$.format,\n            dataType = _styles$dataProvider$.dataType;\n        var numberFormat = this.tryConvertToExcelNumberFormat(format, dataType);\n\n        if ((0, _type.isDefined)(numberFormat)) {\n          numberFormat = numberFormat.replace(/&quot;/g, '\"');\n        } else {\n          if ((0, _type.isString)(excelCell.value) && /^[@=+-]/.test(excelCell.value)) {\n            numberFormat = \"@\";\n          }\n        }\n\n        this.setNumberFormat(excelCell, numberFormat);\n\n        privateOptions._trySetFont(excelCell, bold);\n\n        this.setAlignment(excelCell, wrapText, horizontalAlignment);\n      }\n\n      if ((0, _type.isFunction)(customizeCell)) {\n        customizeCell(privateOptions._getCustomizeCellOptions(excelCell, cell));\n      }\n\n      if (privateOptions._needMergeRange(rowIndex, headerRowCount)) {\n        var mergeRange = this.tryGetMergeRange(rowIndex, cellIndex, mergedCells, dataProvider);\n\n        if ((0, _type.isDefined)(mergeRange)) {\n          mergeRanges.push(mergeRange);\n        }\n      }\n    }\n  }\n};\nexports.Export = Export;","map":{"version":3,"sources":["C:/Pessoal/poc-pivot/node_modules/devextreme/exporter/exceljs/export.js"],"names":["exports","Export","_type","require","_message","_interopRequireDefault","_export_format","_extend","_window","obj","__esModule","MAX_DIGIT_WIDTH_IN_PIXELS","MAX_EXCEL_COLUMN_WIDTH","getFullOptions","options","fullOptions","extend","isDefined","worksheet","isObject","Error","topLeftCell","row","column","isString","_fullOptions$workshee","getCell","col","keepColumnWidths","loadPanel","enabled","text","default","format","convertDateForExcelJS","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setNumberFormat","excelCell","numberFormat","numFmt","tryConvertToExcelNumberFormat","dataType","newFormat","ExportFormat","formatObjectConverter","currency","convertFormat","precision","setAlignment","wrapText","horizontalAlignment","alignment","horizontal","vertical","setColumnsWidth","widths","startColumnIndex","i","length","columnWidth","isFinite","getColumn","width","Math","min","floor","tryGetMergeRange","rowIndex","cellIndex","mergedCells","dataProvider","cellMerge","getCellMerging","colspan","rowspan","j","start","end","mergeCells","mergeRanges","forEach","mergeRange","setLoadPanelOptions","component","privateOptions","hasWindow","_setOptionWithoutOptionChange","_renderLoadPanel","_this","customizeCell","autoFilterEnabled","selectedRowsOnly","initialLoadPanelOptions","option","animation","properties","outlineProperties","summaryBelow","summaryRight","cellRange","from","to","getDataProvider","Promise","resolve","ready","done","columns","getColumns","headerRowCount","isFunction","getHeaderRowCount","dataRowsCount","getRowsCount","getColumnsWidths","getRow","exportRow","worksheetViewSettings","views","rightToLeft","Object","keys","indexOf","_getWorksheetFrozenState","_trySetAutoFilter","always","cellCount","styles","getStyles","_trySetOutlineLevel","cellData","getCellData","cell","cellSourceData","isDate","value","_styles$dataProvider$","getStyleId","bold","replace","test","_trySetFont","_getCustomizeCellOptions","_needMergeRange","push"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (exporter/exceljs/export.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.Export = void 0;\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _export_format = require(\"./export_format\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _window = require(\"../../core/utils/window\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\r\nvar MAX_EXCEL_COLUMN_WIDTH = 255;\r\nvar Export = {\r\n    getFullOptions: function(options) {\r\n        var fullOptions = (0, _extend.extend)({}, options);\r\n        if (!((0, _type.isDefined)(fullOptions.worksheet) && (0, _type.isObject)(fullOptions.worksheet))) {\r\n            throw Error('The \"worksheet\" field must contain an object.')\r\n        }\r\n        if (!(0, _type.isDefined)(fullOptions.topLeftCell)) {\r\n            fullOptions.topLeftCell = {\r\n                row: 1,\r\n                column: 1\r\n            }\r\n        } else {\r\n            if ((0, _type.isString)(fullOptions.topLeftCell)) {\r\n                var _fullOptions$workshee = fullOptions.worksheet.getCell(fullOptions.topLeftCell),\r\n                    row = _fullOptions$workshee.row,\r\n                    col = _fullOptions$workshee.col;\r\n                fullOptions.topLeftCell = {\r\n                    row: row,\r\n                    column: col\r\n                }\r\n            }\r\n        }\r\n        if (!(0, _type.isDefined)(fullOptions.keepColumnWidths)) {\r\n            fullOptions.keepColumnWidths = true\r\n        }\r\n        if (!(0, _type.isDefined)(fullOptions.loadPanel)) {\r\n            fullOptions.loadPanel = {}\r\n        }\r\n        if (!(0, _type.isDefined)(fullOptions.loadPanel.enabled)) {\r\n            fullOptions.loadPanel.enabled = true\r\n        }\r\n        if (!(0, _type.isDefined)(fullOptions.loadPanel.text)) {\r\n            fullOptions.loadPanel.text = _message.default.format(\"dxDataGrid-exporting\")\r\n        }\r\n        return fullOptions\r\n    },\r\n    convertDateForExcelJS: function(date) {\r\n        return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()))\r\n    },\r\n    setNumberFormat: function(excelCell, numberFormat) {\r\n        excelCell.numFmt = numberFormat\r\n    },\r\n    tryConvertToExcelNumberFormat: function(format, dataType) {\r\n        var newFormat = _export_format.ExportFormat.formatObjectConverter(format, dataType);\r\n        var currency = newFormat.currency;\r\n        format = newFormat.format;\r\n        dataType = newFormat.dataType;\r\n        return _export_format.ExportFormat.convertFormat(format, newFormat.precision, dataType, currency)\r\n    },\r\n    setAlignment: function(excelCell, wrapText, horizontalAlignment) {\r\n        excelCell.alignment = excelCell.alignment || {};\r\n        if ((0, _type.isDefined)(wrapText)) {\r\n            excelCell.alignment.wrapText = wrapText\r\n        }\r\n        if ((0, _type.isDefined)(horizontalAlignment)) {\r\n            excelCell.alignment.horizontal = horizontalAlignment\r\n        }\r\n        excelCell.alignment.vertical = \"top\"\r\n    },\r\n    setColumnsWidth: function(worksheet, widths, startColumnIndex) {\r\n        if (!(0, _type.isDefined)(widths)) {\r\n            return\r\n        }\r\n        for (var i = 0; i < widths.length; i++) {\r\n            var columnWidth = widths[i];\r\n            if (\"number\" === typeof columnWidth && isFinite(columnWidth)) {\r\n                worksheet.getColumn(startColumnIndex + i).width = Math.min(MAX_EXCEL_COLUMN_WIDTH, Math.floor(columnWidth / MAX_DIGIT_WIDTH_IN_PIXELS * 100) / 100)\r\n            }\r\n        }\r\n    },\r\n    tryGetMergeRange: function(rowIndex, cellIndex, mergedCells, dataProvider) {\r\n        if (!mergedCells[rowIndex] || !mergedCells[rowIndex][cellIndex]) {\r\n            var cellMerge = dataProvider.getCellMerging(rowIndex, cellIndex);\r\n            if (cellMerge.colspan || cellMerge.rowspan) {\r\n                for (var i = rowIndex; i <= rowIndex + cellMerge.rowspan || 0; i++) {\r\n                    for (var j = cellIndex; j <= cellIndex + cellMerge.colspan || 0; j++) {\r\n                        if (!mergedCells[i]) {\r\n                            mergedCells[i] = []\r\n                        }\r\n                        mergedCells[i][j] = true\r\n                    }\r\n                }\r\n                return {\r\n                    start: {\r\n                        row: rowIndex,\r\n                        column: cellIndex\r\n                    },\r\n                    end: {\r\n                        row: rowIndex + (cellMerge.rowspan || 0),\r\n                        column: cellIndex + (cellMerge.colspan || 0)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    mergeCells: function(worksheet, topLeftCell, mergeRanges) {\r\n        mergeRanges.forEach(function(mergeRange) {\r\n            worksheet.mergeCells(mergeRange.start.row + topLeftCell.row, mergeRange.start.column + topLeftCell.column, mergeRange.end.row + topLeftCell.row, mergeRange.end.column + topLeftCell.column)\r\n        })\r\n    },\r\n    setLoadPanelOptions: function(component, options, privateOptions) {\r\n        if (!(0, _window.hasWindow)()) {\r\n            return\r\n        }\r\n        component._setOptionWithoutOptionChange(\"loadPanel\", options);\r\n        privateOptions._renderLoadPanel(component)\r\n    },\r\n    \"export\": function(options, privateOptions) {\r\n        var _this = this;\r\n        var customizeCell = options.customizeCell,\r\n            component = options.component,\r\n            worksheet = options.worksheet,\r\n            topLeftCell = options.topLeftCell,\r\n            autoFilterEnabled = options.autoFilterEnabled,\r\n            keepColumnWidths = options.keepColumnWidths,\r\n            selectedRowsOnly = options.selectedRowsOnly,\r\n            loadPanel = options.loadPanel;\r\n        var initialLoadPanelOptions = (0, _extend.extend)({}, component.option(\"loadPanel\"));\r\n        if (\"animation\" in component.option(\"loadPanel\")) {\r\n            loadPanel.animation = null\r\n        }\r\n        this.setLoadPanelOptions(component, loadPanel, privateOptions);\r\n        var wrapText = !!component.option(\"wordWrapEnabled\");\r\n        worksheet.properties.outlineProperties = {\r\n            summaryBelow: false,\r\n            summaryRight: false\r\n        };\r\n        var cellRange = {\r\n            from: {\r\n                row: topLeftCell.row,\r\n                column: topLeftCell.column\r\n            },\r\n            to: {\r\n                row: topLeftCell.row,\r\n                column: topLeftCell.column\r\n            }\r\n        };\r\n        var dataProvider = component.getDataProvider(selectedRowsOnly);\r\n        return new Promise(function(resolve) {\r\n            dataProvider.ready().done(function() {\r\n                var columns = dataProvider.getColumns();\r\n                var headerRowCount = (0, _type.isFunction)(dataProvider.getHeaderRowCount) ? dataProvider.getHeaderRowCount() : 1;\r\n                var dataRowsCount = dataProvider.getRowsCount();\r\n                if (keepColumnWidths) {\r\n                    _this.setColumnsWidth(worksheet, dataProvider.getColumnsWidths(), cellRange.from.column)\r\n                }\r\n                var mergedCells = [];\r\n                var mergeRanges = [];\r\n                for (var rowIndex = 0; rowIndex < dataRowsCount; rowIndex++) {\r\n                    var row = worksheet.getRow(cellRange.from.row + rowIndex);\r\n                    _this.exportRow(rowIndex, columns.length, row, cellRange.from.column, dataProvider, customizeCell, headerRowCount, mergedCells, mergeRanges, wrapText, privateOptions);\r\n                    if (rowIndex >= 1) {\r\n                        cellRange.to.row++\r\n                    }\r\n                }\r\n                _this.mergeCells(worksheet, topLeftCell, mergeRanges);\r\n                cellRange.to.column += columns.length > 0 ? columns.length - 1 : 0;\r\n                var worksheetViewSettings = worksheet.views[0] || {};\r\n                if (component.option(\"rtlEnabled\")) {\r\n                    worksheetViewSettings.rightToLeft = true\r\n                }\r\n                if (headerRowCount > 0) {\r\n                    if (Object.keys(worksheetViewSettings).indexOf(\"state\") === -1) {\r\n                        (0, _extend.extend)(worksheetViewSettings, privateOptions._getWorksheetFrozenState(dataProvider, cellRange))\r\n                    }\r\n                    privateOptions._trySetAutoFilter(dataProvider, worksheet, cellRange, headerRowCount, autoFilterEnabled)\r\n                }\r\n                if (Object.keys(worksheetViewSettings).length > 0) {\r\n                    worksheet.views = [worksheetViewSettings]\r\n                }\r\n                resolve(cellRange)\r\n            }).always(function() {\r\n                _this.setLoadPanelOptions(component, initialLoadPanelOptions, privateOptions)\r\n            })\r\n        })\r\n    },\r\n    exportRow: function(rowIndex, cellCount, row, startColumnIndex, dataProvider, customizeCell, headerRowCount, mergedCells, mergeRanges, wrapText, privateOptions) {\r\n        var styles = dataProvider.getStyles();\r\n        privateOptions._trySetOutlineLevel(dataProvider, row, rowIndex, headerRowCount);\r\n        for (var cellIndex = 0; cellIndex < cellCount; cellIndex++) {\r\n            var cellData = dataProvider.getCellData(rowIndex, cellIndex, true);\r\n            var cell = cellData.cellSourceData;\r\n            var excelCell = row.getCell(startColumnIndex + cellIndex);\r\n            if ((0, _type.isDate)(cellData.value)) {\r\n                excelCell.value = this.convertDateForExcelJS(cellData.value)\r\n            } else {\r\n                excelCell.value = cellData.value\r\n            }\r\n            if ((0, _type.isDefined)(excelCell.value)) {\r\n                var _styles$dataProvider$ = styles[dataProvider.getStyleId(rowIndex, cellIndex)],\r\n                    bold = _styles$dataProvider$.bold,\r\n                    horizontalAlignment = _styles$dataProvider$.alignment,\r\n                    format = _styles$dataProvider$.format,\r\n                    dataType = _styles$dataProvider$.dataType;\r\n                var numberFormat = this.tryConvertToExcelNumberFormat(format, dataType);\r\n                if ((0, _type.isDefined)(numberFormat)) {\r\n                    numberFormat = numberFormat.replace(/&quot;/g, '\"')\r\n                } else {\r\n                    if ((0, _type.isString)(excelCell.value) && /^[@=+-]/.test(excelCell.value)) {\r\n                        numberFormat = \"@\"\r\n                    }\r\n                }\r\n                this.setNumberFormat(excelCell, numberFormat);\r\n                privateOptions._trySetFont(excelCell, bold);\r\n                this.setAlignment(excelCell, wrapText, horizontalAlignment)\r\n            }\r\n            if ((0, _type.isFunction)(customizeCell)) {\r\n                customizeCell(privateOptions._getCustomizeCellOptions(excelCell, cell))\r\n            }\r\n            if (privateOptions._needMergeRange(rowIndex, headerRowCount)) {\r\n                var mergeRange = this.tryGetMergeRange(rowIndex, cellIndex, mergedCells, dataProvider);\r\n                if ((0, _type.isDefined)(mergeRange)) {\r\n                    mergeRanges.push(mergeRange)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.Export = Export;\r\n"]},"metadata":{},"sourceType":"script"}