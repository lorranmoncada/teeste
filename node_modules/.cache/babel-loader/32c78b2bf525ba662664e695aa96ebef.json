{"ast":null,"code":"/**\r\n * DevExtreme (exporter/exceljs/export_format.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.ExportFormat = void 0;\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _number = _interopRequireDefault(require(\"../../localization/number\"));\n\nvar _date = _interopRequireDefault(require(\"../../localization/date\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _date2 = require(\"../../localization/ldml/date.format\");\n\nvar _language_codes = require(\"../../localization/language_codes\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nrequire(\"../../localization/currency\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ARABIC_ZERO_CODE = 1632;\nvar DEFINED_NUMBER_FORMTATS = {\n  thousands: \"#,##0{0},&quot;K&quot;\",\n  millions: \"#,##0{0},,&quot;M&quot;\",\n  billions: \"#,##0{0},,,&quot;B&quot;\",\n  trillions: \"#,##0{0},,,,&quot;T&quot;\",\n  percent: \"0{0}%\",\n  decimal: \"#{0}\",\n  fixedpoint: \"#,##0{0}\",\n  exponential: \"0{0}E+00\",\n  currency: \" \"\n};\nvar PERIOD_REGEXP = /a+/g;\nvar DAY_REGEXP = /E/g;\nvar DO_REGEXP = /dE+/g;\nvar STANDALONE_MONTH_REGEXP = /L/g;\nvar HOUR_REGEXP = /h/g;\nvar SLASH_REGEXP = /\\//g;\nvar SQUARE_OPEN_BRACKET_REGEXP = /\\[/g;\nvar SQUARE_CLOSE_BRACKET_REGEXP = /]/g;\nvar ANY_REGEXP = /./g;\n\nfunction _applyPrecision(format, precision) {\n  var result;\n  var i;\n\n  if (precision > 0) {\n    result = \"decimal\" !== format ? \".\" : \"\";\n\n    for (i = 0; i < precision; i++) {\n      result += \"0\";\n    }\n\n    return result;\n  }\n\n  return \"\";\n}\n\nfunction _hasArabicDigits(text) {\n  var code;\n\n  for (var i = 0; i < text.length; i++) {\n    code = text.charCodeAt(i);\n\n    if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _convertDateFormat(format) {\n  var formattedValue = (_date.default.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\n  var result = (0, _date2.getFormat)(function (value) {\n    return _date.default.format(value, format);\n  });\n\n  if (result) {\n    result = _convertDateFormatToOpenXml(result);\n    result = _getLanguageInfo(formattedValue) + result;\n  }\n\n  return result;\n}\n\nfunction _getLanguageInfo(defaultPattern) {\n  var languageID = (0, _language_codes.getLanguageId)();\n  var languageIDStr = languageID ? languageID.toString(16) : \"\";\n  var languageInfo = \"\";\n\n  if (_hasArabicDigits(defaultPattern)) {\n    while (languageIDStr.length < 3) {\n      languageIDStr = \"0\" + languageIDStr;\n    }\n\n    languageInfo = \"[$-2010\" + languageIDStr + \"]\";\n  } else {\n    if (languageIDStr) {\n      languageInfo = \"[$-\" + languageIDStr + \"]\";\n    }\n  }\n\n  return languageInfo;\n}\n\nfunction _convertDateFormatToOpenXml(format) {\n  return format.replace(SLASH_REGEXP, \"\\\\/\").split(\"'\").map(function (datePart, index) {\n    if (index % 2 === 0) {\n      return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").replace(SQUARE_OPEN_BRACKET_REGEXP, \"\\\\[\").replace(SQUARE_CLOSE_BRACKET_REGEXP, \"\\\\]\");\n    }\n\n    if (datePart) {\n      return datePart.replace(ANY_REGEXP, \"\\\\$&\");\n    }\n\n    return \"'\";\n  }).join(\"\");\n}\n\nfunction _convertNumberFormat(format, precision, currency) {\n  var result;\n  var excelFormat;\n\n  if (\"currency\" === format) {\n    excelFormat = _number.default.getOpenXmlCurrencyFormat(currency);\n  } else {\n    excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()];\n  }\n\n  if (excelFormat) {\n    result = (0, _string.format)(excelFormat, _applyPrecision(format, precision));\n  }\n\n  return result;\n}\n\nvar ExportFormat = {\n  formatObjectConverter: function (format, dataType) {\n    var result = {\n      format: format,\n      precision: format && format.precision,\n      dataType: dataType\n    };\n\n    if ((0, _type.isObject)(format)) {\n      return (0, _extend.extend)(result, format, {\n        format: format.formatter || format.type,\n        currency: format.currency\n      });\n    }\n\n    return result;\n  },\n  convertFormat: function (format, precision, type, currency) {\n    if ((0, _type.isDefined)(format)) {\n      if (\"date\" === type) {\n        return _convertDateFormat(format);\n      } else {\n        if ((0, _type.isString)(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\n          return _convertNumberFormat(format, precision, currency);\n        }\n      }\n    }\n  }\n};\nexports.ExportFormat = ExportFormat;","map":{"version":3,"sources":["C:/Pessoal/poc-pivot/node_modules/devextreme/exporter/exceljs/export_format.js"],"names":["exports","ExportFormat","_string","require","_number","_interopRequireDefault","_date","_type","_date2","_language_codes","_extend","obj","__esModule","ARABIC_ZERO_CODE","DEFINED_NUMBER_FORMTATS","thousands","millions","billions","trillions","percent","decimal","fixedpoint","exponential","currency","PERIOD_REGEXP","DAY_REGEXP","DO_REGEXP","STANDALONE_MONTH_REGEXP","HOUR_REGEXP","SLASH_REGEXP","SQUARE_OPEN_BRACKET_REGEXP","SQUARE_CLOSE_BRACKET_REGEXP","ANY_REGEXP","_applyPrecision","format","precision","result","i","_hasArabicDigits","text","code","length","charCodeAt","_convertDateFormat","formattedValue","default","Date","toString","getFormat","value","_convertDateFormatToOpenXml","_getLanguageInfo","defaultPattern","languageID","getLanguageId","languageIDStr","languageInfo","replace","split","map","datePart","index","join","_convertNumberFormat","excelFormat","getOpenXmlCurrencyFormat","toLowerCase","formatObjectConverter","dataType","isObject","extend","formatter","type","convertFormat","isDefined","isString"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (exporter/exceljs/export_format.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.ExportFormat = void 0;\r\nvar _string = require(\"../../core/utils/string\");\r\nvar _number = _interopRequireDefault(require(\"../../localization/number\"));\r\nvar _date = _interopRequireDefault(require(\"../../localization/date\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _date2 = require(\"../../localization/ldml/date.format\");\r\nvar _language_codes = require(\"../../localization/language_codes\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nrequire(\"../../localization/currency\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar ARABIC_ZERO_CODE = 1632;\r\nvar DEFINED_NUMBER_FORMTATS = {\r\n    thousands: \"#,##0{0},&quot;K&quot;\",\r\n    millions: \"#,##0{0},,&quot;M&quot;\",\r\n    billions: \"#,##0{0},,,&quot;B&quot;\",\r\n    trillions: \"#,##0{0},,,,&quot;T&quot;\",\r\n    percent: \"0{0}%\",\r\n    decimal: \"#{0}\",\r\n    fixedpoint: \"#,##0{0}\",\r\n    exponential: \"0{0}E+00\",\r\n    currency: \" \"\r\n};\r\nvar PERIOD_REGEXP = /a+/g;\r\nvar DAY_REGEXP = /E/g;\r\nvar DO_REGEXP = /dE+/g;\r\nvar STANDALONE_MONTH_REGEXP = /L/g;\r\nvar HOUR_REGEXP = /h/g;\r\nvar SLASH_REGEXP = /\\//g;\r\nvar SQUARE_OPEN_BRACKET_REGEXP = /\\[/g;\r\nvar SQUARE_CLOSE_BRACKET_REGEXP = /]/g;\r\nvar ANY_REGEXP = /./g;\r\n\r\nfunction _applyPrecision(format, precision) {\r\n    var result;\r\n    var i;\r\n    if (precision > 0) {\r\n        result = \"decimal\" !== format ? \".\" : \"\";\r\n        for (i = 0; i < precision; i++) {\r\n            result += \"0\"\r\n        }\r\n        return result\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction _hasArabicDigits(text) {\r\n    var code;\r\n    for (var i = 0; i < text.length; i++) {\r\n        code = text.charCodeAt(i);\r\n        if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction _convertDateFormat(format) {\r\n    var formattedValue = (_date.default.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\r\n    var result = (0, _date2.getFormat)(function(value) {\r\n        return _date.default.format(value, format)\r\n    });\r\n    if (result) {\r\n        result = _convertDateFormatToOpenXml(result);\r\n        result = _getLanguageInfo(formattedValue) + result\r\n    }\r\n    return result\r\n}\r\n\r\nfunction _getLanguageInfo(defaultPattern) {\r\n    var languageID = (0, _language_codes.getLanguageId)();\r\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\r\n    var languageInfo = \"\";\r\n    if (_hasArabicDigits(defaultPattern)) {\r\n        while (languageIDStr.length < 3) {\r\n            languageIDStr = \"0\" + languageIDStr\r\n        }\r\n        languageInfo = \"[$-2010\" + languageIDStr + \"]\"\r\n    } else {\r\n        if (languageIDStr) {\r\n            languageInfo = \"[$-\" + languageIDStr + \"]\"\r\n        }\r\n    }\r\n    return languageInfo\r\n}\r\n\r\nfunction _convertDateFormatToOpenXml(format) {\r\n    return format.replace(SLASH_REGEXP, \"\\\\/\").split(\"'\").map(function(datePart, index) {\r\n        if (index % 2 === 0) {\r\n            return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").replace(SQUARE_OPEN_BRACKET_REGEXP, \"\\\\[\").replace(SQUARE_CLOSE_BRACKET_REGEXP, \"\\\\]\")\r\n        }\r\n        if (datePart) {\r\n            return datePart.replace(ANY_REGEXP, \"\\\\$&\")\r\n        }\r\n        return \"'\"\r\n    }).join(\"\")\r\n}\r\n\r\nfunction _convertNumberFormat(format, precision, currency) {\r\n    var result;\r\n    var excelFormat;\r\n    if (\"currency\" === format) {\r\n        excelFormat = _number.default.getOpenXmlCurrencyFormat(currency)\r\n    } else {\r\n        excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()]\r\n    }\r\n    if (excelFormat) {\r\n        result = (0, _string.format)(excelFormat, _applyPrecision(format, precision))\r\n    }\r\n    return result\r\n}\r\nvar ExportFormat = {\r\n    formatObjectConverter: function(format, dataType) {\r\n        var result = {\r\n            format: format,\r\n            precision: format && format.precision,\r\n            dataType: dataType\r\n        };\r\n        if ((0, _type.isObject)(format)) {\r\n            return (0, _extend.extend)(result, format, {\r\n                format: format.formatter || format.type,\r\n                currency: format.currency\r\n            })\r\n        }\r\n        return result\r\n    },\r\n    convertFormat: function(format, precision, type, currency) {\r\n        if ((0, _type.isDefined)(format)) {\r\n            if (\"date\" === type) {\r\n                return _convertDateFormat(format)\r\n            } else {\r\n                if ((0, _type.isString)(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\r\n                    return _convertNumberFormat(format, precision, currency)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.ExportFormat = ExportFormat;\r\n"]},"metadata":{},"sourceType":"script"}